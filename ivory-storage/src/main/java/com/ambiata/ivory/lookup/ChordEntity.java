/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.lookup;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChordEntity implements org.apache.thrift.TBase<ChordEntity, ChordEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ChordEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChordEntity");

  private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATES_FIELD_DESC = new org.apache.thrift.protocol.TField("dates", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChordEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChordEntityTupleSchemeFactory());
  }

  public String entity; // required
  public List<Integer> dates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTITY((short)1, "entity"),
    DATES((short)2, "dates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTITY
          return ENTITY;
        case 2: // DATES
          return DATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATES, new org.apache.thrift.meta_data.FieldMetaData("dates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChordEntity.class, metaDataMap);
  }

  public ChordEntity() {
  }

  public ChordEntity(
    String entity,
    List<Integer> dates)
  {
    this();
    this.entity = entity;
    this.dates = dates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChordEntity(ChordEntity other) {
    if (other.isSetEntity()) {
      this.entity = other.entity;
    }
    if (other.isSetDates()) {
      List<Integer> __this__dates = new ArrayList<Integer>(other.dates);
      this.dates = __this__dates;
    }
  }

  public ChordEntity deepCopy() {
    return new ChordEntity(this);
  }

  @Override
  public void clear() {
    this.entity = null;
    this.dates = null;
  }

  public String getEntity() {
    return this.entity;
  }

  public ChordEntity setEntity(String entity) {
    this.entity = entity;
    return this;
  }

  public void unsetEntity() {
    this.entity = null;
  }

  /** Returns true if field entity is set (has been assigned a value) and false otherwise */
  public boolean isSetEntity() {
    return this.entity != null;
  }

  public void setEntityIsSet(boolean value) {
    if (!value) {
      this.entity = null;
    }
  }

  public int getDatesSize() {
    return (this.dates == null) ? 0 : this.dates.size();
  }

  public java.util.Iterator<Integer> getDatesIterator() {
    return (this.dates == null) ? null : this.dates.iterator();
  }

  public void addToDates(int elem) {
    if (this.dates == null) {
      this.dates = new ArrayList<Integer>();
    }
    this.dates.add(elem);
  }

  public List<Integer> getDates() {
    return this.dates;
  }

  public ChordEntity setDates(List<Integer> dates) {
    this.dates = dates;
    return this;
  }

  public void unsetDates() {
    this.dates = null;
  }

  /** Returns true if field dates is set (has been assigned a value) and false otherwise */
  public boolean isSetDates() {
    return this.dates != null;
  }

  public void setDatesIsSet(boolean value) {
    if (!value) {
      this.dates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTITY:
      if (value == null) {
        unsetEntity();
      } else {
        setEntity((String)value);
      }
      break;

    case DATES:
      if (value == null) {
        unsetDates();
      } else {
        setDates((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTITY:
      return getEntity();

    case DATES:
      return getDates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTITY:
      return isSetEntity();
    case DATES:
      return isSetDates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChordEntity)
      return this.equals((ChordEntity)that);
    return false;
  }

  public boolean equals(ChordEntity that) {
    if (that == null)
      return false;

    boolean this_present_entity = true && this.isSetEntity();
    boolean that_present_entity = true && that.isSetEntity();
    if (this_present_entity || that_present_entity) {
      if (!(this_present_entity && that_present_entity))
        return false;
      if (!this.entity.equals(that.entity))
        return false;
    }

    boolean this_present_dates = true && this.isSetDates();
    boolean that_present_dates = true && that.isSetDates();
    if (this_present_dates || that_present_dates) {
      if (!(this_present_dates && that_present_dates))
        return false;
      if (!this.dates.equals(that.dates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ChordEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDates()).compareTo(other.isSetDates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dates, other.dates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChordEntity(");
    boolean first = true;

    sb.append("entity:");
    if (this.entity == null) {
      sb.append("null");
    } else {
      sb.append(this.entity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dates:");
    if (this.dates == null) {
      sb.append("null");
    } else {
      sb.append(this.dates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChordEntityStandardSchemeFactory implements SchemeFactory {
    public ChordEntityStandardScheme getScheme() {
      return new ChordEntityStandardScheme();
    }
  }

  private static class ChordEntityStandardScheme extends StandardScheme<ChordEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChordEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entity = iprot.readString();
              struct.setEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.dates = new ArrayList<Integer>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  int _elem90;
                  _elem90 = iprot.readI32();
                  struct.dates.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setDatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChordEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entity != null) {
        oprot.writeFieldBegin(ENTITY_FIELD_DESC);
        oprot.writeString(struct.entity);
        oprot.writeFieldEnd();
      }
      if (struct.dates != null) {
        oprot.writeFieldBegin(DATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dates.size()));
          for (int _iter91 : struct.dates)
          {
            oprot.writeI32(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChordEntityTupleSchemeFactory implements SchemeFactory {
    public ChordEntityTupleScheme getScheme() {
      return new ChordEntityTupleScheme();
    }
  }

  private static class ChordEntityTupleScheme extends TupleScheme<ChordEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChordEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEntity()) {
        optionals.set(0);
      }
      if (struct.isSetDates()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEntity()) {
        oprot.writeString(struct.entity);
      }
      if (struct.isSetDates()) {
        {
          oprot.writeI32(struct.dates.size());
          for (int _iter92 : struct.dates)
          {
            oprot.writeI32(_iter92);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChordEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.entity = iprot.readString();
        struct.setEntityIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dates = new ArrayList<Integer>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            int _elem95;
            _elem95 = iprot.readI32();
            struct.dates.add(_elem95);
          }
        }
        struct.setDatesIsSet(true);
      }
    }
  }

}

