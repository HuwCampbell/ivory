/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.operation.ingestion.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftFactValue extends org.apache.thrift.TUnion<ThriftFactValue, ThriftFactValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftFactValue");
  private static final org.apache.thrift.protocol.TField PRIMITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("primitive", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STRCT_FIELD_DESC = new org.apache.thrift.protocol.TField("strct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LST_FIELD_DESC = new org.apache.thrift.protocol.TField("lst", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIMITIVE((short)1, "primitive"),
    STRCT((short)2, "strct"),
    LST((short)3, "lst");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIMITIVE
          return PRIMITIVE;
        case 2: // STRCT
          return STRCT;
        case 3: // LST
          return LST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIMITIVE, new org.apache.thrift.meta_data.FieldMetaData("primitive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFactPrimitiveValue.class)));
    tmpMap.put(_Fields.STRCT, new org.apache.thrift.meta_data.FieldMetaData("strct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFactStruct.class)));
    tmpMap.put(_Fields.LST, new org.apache.thrift.meta_data.FieldMetaData("lst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFactList.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftFactValue.class, metaDataMap);
  }

  public ThriftFactValue() {
    super();
  }

  public ThriftFactValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public ThriftFactValue(ThriftFactValue other) {
    super(other);
  }
  public ThriftFactValue deepCopy() {
    return new ThriftFactValue(this);
  }

  public static ThriftFactValue primitive(ThriftFactPrimitiveValue value) {
    ThriftFactValue x = new ThriftFactValue();
    x.setPrimitive(value);
    return x;
  }

  public static ThriftFactValue strct(ThriftFactStruct value) {
    ThriftFactValue x = new ThriftFactValue();
    x.setStrct(value);
    return x;
  }

  public static ThriftFactValue lst(ThriftFactList value) {
    ThriftFactValue x = new ThriftFactValue();
    x.setLst(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case PRIMITIVE:
        if (value instanceof ThriftFactPrimitiveValue) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ThriftFactPrimitiveValue for field 'primitive', but got " + value.getClass().getSimpleName());
      case STRCT:
        if (value instanceof ThriftFactStruct) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ThriftFactStruct for field 'strct', but got " + value.getClass().getSimpleName());
      case LST:
        if (value instanceof ThriftFactList) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ThriftFactList for field 'lst', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case PRIMITIVE:
          if (field.type == PRIMITIVE_FIELD_DESC.type) {
            ThriftFactPrimitiveValue primitive;
            primitive = new ThriftFactPrimitiveValue();
            primitive.read(iprot);
            return primitive;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRCT:
          if (field.type == STRCT_FIELD_DESC.type) {
            ThriftFactStruct strct;
            strct = new ThriftFactStruct();
            strct.read(iprot);
            return strct;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LST:
          if (field.type == LST_FIELD_DESC.type) {
            ThriftFactList lst;
            lst = new ThriftFactList();
            lst.read(iprot);
            return lst;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PRIMITIVE:
        ThriftFactPrimitiveValue primitive = (ThriftFactPrimitiveValue)value_;
        primitive.write(oprot);
        return;
      case STRCT:
        ThriftFactStruct strct = (ThriftFactStruct)value_;
        strct.write(oprot);
        return;
      case LST:
        ThriftFactList lst = (ThriftFactList)value_;
        lst.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case PRIMITIVE:
          ThriftFactPrimitiveValue primitive;
          primitive = new ThriftFactPrimitiveValue();
          primitive.read(iprot);
          return primitive;
        case STRCT:
          ThriftFactStruct strct;
          strct = new ThriftFactStruct();
          strct.read(iprot);
          return strct;
        case LST:
          ThriftFactList lst;
          lst = new ThriftFactList();
          lst.read(iprot);
          return lst;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PRIMITIVE:
        ThriftFactPrimitiveValue primitive = (ThriftFactPrimitiveValue)value_;
        primitive.write(oprot);
        return;
      case STRCT:
        ThriftFactStruct strct = (ThriftFactStruct)value_;
        strct.write(oprot);
        return;
      case LST:
        ThriftFactList lst = (ThriftFactList)value_;
        lst.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case PRIMITIVE:
        return PRIMITIVE_FIELD_DESC;
      case STRCT:
        return STRCT_FIELD_DESC;
      case LST:
        return LST_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public ThriftFactPrimitiveValue getPrimitive() {
    if (getSetField() == _Fields.PRIMITIVE) {
      return (ThriftFactPrimitiveValue)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'primitive' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPrimitive(ThriftFactPrimitiveValue value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PRIMITIVE;
    value_ = value;
  }

  public ThriftFactStruct getStrct() {
    if (getSetField() == _Fields.STRCT) {
      return (ThriftFactStruct)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'strct' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStrct(ThriftFactStruct value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRCT;
    value_ = value;
  }

  public ThriftFactList getLst() {
    if (getSetField() == _Fields.LST) {
      return (ThriftFactList)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'lst' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLst(ThriftFactList value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LST;
    value_ = value;
  }

  public boolean isSetPrimitive() {
    return setField_ == _Fields.PRIMITIVE;
  }


  public boolean isSetStrct() {
    return setField_ == _Fields.STRCT;
  }


  public boolean isSetLst() {
    return setField_ == _Fields.LST;
  }


  public boolean equals(Object other) {
    if (other instanceof ThriftFactValue) {
      return equals((ThriftFactValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(ThriftFactValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ThriftFactValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
