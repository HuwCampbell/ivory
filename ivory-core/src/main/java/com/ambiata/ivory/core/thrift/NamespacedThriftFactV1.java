/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NamespacedThriftFactV1 implements org.apache.thrift.TBase<NamespacedThriftFactV1, NamespacedThriftFactV1._Fields>, java.io.Serializable, Cloneable, Comparable<NamespacedThriftFactV1> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NamespacedThriftFactV1");

  private static final org.apache.thrift.protocol.TField FACT_FIELD_DESC = new org.apache.thrift.protocol.TField("fact", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NSPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nspace", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField YYYY_MMDD_FIELD_DESC = new org.apache.thrift.protocol.TField("yyyyMMdd", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NamespacedThriftFactV1StandardSchemeFactory());
    schemes.put(TupleScheme.class, new NamespacedThriftFactV1TupleSchemeFactory());
  }

  public ThriftFactV1 fact; // required
  public String nspace; // required
  public int yyyyMMdd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FACT((short)1, "fact"),
    NSPACE((short)2, "nspace"),
    YYYY_MMDD((short)3, "yyyyMMdd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACT
          return FACT;
        case 2: // NSPACE
          return NSPACE;
        case 3: // YYYY_MMDD
          return YYYY_MMDD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YYYYMMDD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACT, new org.apache.thrift.meta_data.FieldMetaData("fact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFactV1.class)));
    tmpMap.put(_Fields.NSPACE, new org.apache.thrift.meta_data.FieldMetaData("nspace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YYYY_MMDD, new org.apache.thrift.meta_data.FieldMetaData("yyyyMMdd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NamespacedThriftFactV1.class, metaDataMap);
  }

  public NamespacedThriftFactV1() {
  }

  public NamespacedThriftFactV1(
    ThriftFactV1 fact,
    String nspace,
    int yyyyMMdd)
  {
    this();
    this.fact = fact;
    this.nspace = nspace;
    this.yyyyMMdd = yyyyMMdd;
    setYyyyMMddIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NamespacedThriftFactV1(NamespacedThriftFactV1 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFact()) {
      this.fact = new ThriftFactV1(other.fact);
    }
    if (other.isSetNspace()) {
      this.nspace = other.nspace;
    }
    this.yyyyMMdd = other.yyyyMMdd;
  }

  public NamespacedThriftFactV1 deepCopy() {
    return new NamespacedThriftFactV1(this);
  }

  @Override
  public void clear() {
    this.fact = null;
    this.nspace = null;
    setYyyyMMddIsSet(false);
    this.yyyyMMdd = 0;
  }

  public ThriftFactV1 getFact() {
    return this.fact;
  }

  public NamespacedThriftFactV1 setFact(ThriftFactV1 fact) {
    this.fact = fact;
    return this;
  }

  public void unsetFact() {
    this.fact = null;
  }

  /** Returns true if field fact is set (has been assigned a value) and false otherwise */
  public boolean isSetFact() {
    return this.fact != null;
  }

  public void setFactIsSet(boolean value) {
    if (!value) {
      this.fact = null;
    }
  }

  public String getNspace() {
    return this.nspace;
  }

  public NamespacedThriftFactV1 setNspace(String nspace) {
    this.nspace = nspace;
    return this;
  }

  public void unsetNspace() {
    this.nspace = null;
  }

  /** Returns true if field nspace is set (has been assigned a value) and false otherwise */
  public boolean isSetNspace() {
    return this.nspace != null;
  }

  public void setNspaceIsSet(boolean value) {
    if (!value) {
      this.nspace = null;
    }
  }

  public int getYyyyMMdd() {
    return this.yyyyMMdd;
  }

  public NamespacedThriftFactV1 setYyyyMMdd(int yyyyMMdd) {
    this.yyyyMMdd = yyyyMMdd;
    setYyyyMMddIsSet(true);
    return this;
  }

  public void unsetYyyyMMdd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YYYYMMDD_ISSET_ID);
  }

  /** Returns true if field yyyyMMdd is set (has been assigned a value) and false otherwise */
  public boolean isSetYyyyMMdd() {
    return EncodingUtils.testBit(__isset_bitfield, __YYYYMMDD_ISSET_ID);
  }

  public void setYyyyMMddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YYYYMMDD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FACT:
      if (value == null) {
        unsetFact();
      } else {
        setFact((ThriftFactV1)value);
      }
      break;

    case NSPACE:
      if (value == null) {
        unsetNspace();
      } else {
        setNspace((String)value);
      }
      break;

    case YYYY_MMDD:
      if (value == null) {
        unsetYyyyMMdd();
      } else {
        setYyyyMMdd((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FACT:
      return getFact();

    case NSPACE:
      return getNspace();

    case YYYY_MMDD:
      return Integer.valueOf(getYyyyMMdd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FACT:
      return isSetFact();
    case NSPACE:
      return isSetNspace();
    case YYYY_MMDD:
      return isSetYyyyMMdd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NamespacedThriftFactV1)
      return this.equals((NamespacedThriftFactV1)that);
    return false;
  }

  public boolean equals(NamespacedThriftFactV1 that) {
    if (that == null)
      return false;

    boolean this_present_fact = true && this.isSetFact();
    boolean that_present_fact = true && that.isSetFact();
    if (this_present_fact || that_present_fact) {
      if (!(this_present_fact && that_present_fact))
        return false;
      if (!this.fact.equals(that.fact))
        return false;
    }

    boolean this_present_nspace = true && this.isSetNspace();
    boolean that_present_nspace = true && that.isSetNspace();
    if (this_present_nspace || that_present_nspace) {
      if (!(this_present_nspace && that_present_nspace))
        return false;
      if (!this.nspace.equals(that.nspace))
        return false;
    }

    boolean this_present_yyyyMMdd = true;
    boolean that_present_yyyyMMdd = true;
    if (this_present_yyyyMMdd || that_present_yyyyMMdd) {
      if (!(this_present_yyyyMMdd && that_present_yyyyMMdd))
        return false;
      if (this.yyyyMMdd != that.yyyyMMdd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NamespacedThriftFactV1 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFact()).compareTo(other.isSetFact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fact, other.fact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNspace()).compareTo(other.isSetNspace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNspace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nspace, other.nspace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYyyyMMdd()).compareTo(other.isSetYyyyMMdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyyyMMdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyyyMMdd, other.yyyyMMdd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NamespacedThriftFactV1(");
    boolean first = true;

    sb.append("fact:");
    if (this.fact == null) {
      sb.append("null");
    } else {
      sb.append(this.fact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nspace:");
    if (this.nspace == null) {
      sb.append("null");
    } else {
      sb.append(this.nspace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yyyyMMdd:");
    sb.append(this.yyyyMMdd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fact != null) {
      fact.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NamespacedThriftFactV1StandardSchemeFactory implements SchemeFactory {
    public NamespacedThriftFactV1StandardScheme getScheme() {
      return new NamespacedThriftFactV1StandardScheme();
    }
  }

  private static class NamespacedThriftFactV1StandardScheme extends StandardScheme<NamespacedThriftFactV1> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NamespacedThriftFactV1 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fact = new ThriftFactV1();
              struct.fact.read(iprot);
              struct.setFactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NSPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nspace = iprot.readString();
              struct.setNspaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YYYY_MMDD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.yyyyMMdd = iprot.readI32();
              struct.setYyyyMMddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NamespacedThriftFactV1 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fact != null) {
        oprot.writeFieldBegin(FACT_FIELD_DESC);
        struct.fact.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nspace != null) {
        oprot.writeFieldBegin(NSPACE_FIELD_DESC);
        oprot.writeString(struct.nspace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YYYY_MMDD_FIELD_DESC);
      oprot.writeI32(struct.yyyyMMdd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NamespacedThriftFactV1TupleSchemeFactory implements SchemeFactory {
    public NamespacedThriftFactV1TupleScheme getScheme() {
      return new NamespacedThriftFactV1TupleScheme();
    }
  }

  private static class NamespacedThriftFactV1TupleScheme extends TupleScheme<NamespacedThriftFactV1> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NamespacedThriftFactV1 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFact()) {
        optionals.set(0);
      }
      if (struct.isSetNspace()) {
        optionals.set(1);
      }
      if (struct.isSetYyyyMMdd()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFact()) {
        struct.fact.write(oprot);
      }
      if (struct.isSetNspace()) {
        oprot.writeString(struct.nspace);
      }
      if (struct.isSetYyyyMMdd()) {
        oprot.writeI32(struct.yyyyMMdd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NamespacedThriftFactV1 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fact = new ThriftFactV1();
        struct.fact.read(iprot);
        struct.setFactIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nspace = iprot.readString();
        struct.setNspaceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.yyyyMMdd = iprot.readI32();
        struct.setYyyyMMddIsSet(true);
      }
    }
  }

}

