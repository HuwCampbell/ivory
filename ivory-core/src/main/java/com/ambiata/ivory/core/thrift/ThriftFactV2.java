/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftFactV2 implements org.apache.thrift.TBase<ThriftFactV2, ThriftFactV2._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftFactV2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftFactV2");

  private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FINDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("findex", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seconds", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftFactV2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftFactV2TupleSchemeFactory());
  }

  public String entity; // required
  public int findex; // required
  public ThriftFactValue value; // required
  public int seconds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTITY((short)1, "entity"),
    FINDEX((short)2, "findex"),
    VALUE((short)3, "value"),
    SECONDS((short)4, "seconds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTITY
          return ENTITY;
        case 2: // FINDEX
          return FINDEX;
        case 3: // VALUE
          return VALUE;
        case 4: // SECONDS
          return SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FINDEX_ISSET_ID = 0;
  private static final int __SECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SECONDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINDEX, new org.apache.thrift.meta_data.FieldMetaData("findex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFactValue.class)));
    tmpMap.put(_Fields.SECONDS, new org.apache.thrift.meta_data.FieldMetaData("seconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftFactV2.class, metaDataMap);
  }

  public ThriftFactV2() {
  }

  public ThriftFactV2(
    String entity,
    int findex,
    ThriftFactValue value)
  {
    this();
    this.entity = entity;
    this.findex = findex;
    setFindexIsSet(true);
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftFactV2(ThriftFactV2 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEntity()) {
      this.entity = other.entity;
    }
    this.findex = other.findex;
    if (other.isSetValue()) {
      this.value = new ThriftFactValue(other.value);
    }
    this.seconds = other.seconds;
  }

  public ThriftFactV2 deepCopy() {
    return new ThriftFactV2(this);
  }

  @Override
  public void clear() {
    this.entity = null;
    setFindexIsSet(false);
    this.findex = 0;
    this.value = null;
    setSecondsIsSet(false);
    this.seconds = 0;
  }

  public String getEntity() {
    return this.entity;
  }

  public ThriftFactV2 setEntity(String entity) {
    this.entity = entity;
    return this;
  }

  public void unsetEntity() {
    this.entity = null;
  }

  /** Returns true if field entity is set (has been assigned a value) and false otherwise */
  public boolean isSetEntity() {
    return this.entity != null;
  }

  public void setEntityIsSet(boolean value) {
    if (!value) {
      this.entity = null;
    }
  }

  public int getFindex() {
    return this.findex;
  }

  public ThriftFactV2 setFindex(int findex) {
    this.findex = findex;
    setFindexIsSet(true);
    return this;
  }

  public void unsetFindex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINDEX_ISSET_ID);
  }

  /** Returns true if field findex is set (has been assigned a value) and false otherwise */
  public boolean isSetFindex() {
    return EncodingUtils.testBit(__isset_bitfield, __FINDEX_ISSET_ID);
  }

  public void setFindexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINDEX_ISSET_ID, value);
  }

  public ThriftFactValue getValue() {
    return this.value;
  }

  public ThriftFactV2 setValue(ThriftFactValue value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public int getSeconds() {
    return this.seconds;
  }

  public ThriftFactV2 setSeconds(int seconds) {
    this.seconds = seconds;
    setSecondsIsSet(true);
    return this;
  }

  public void unsetSeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  /** Returns true if field seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetSeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  public void setSecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTITY:
      if (value == null) {
        unsetEntity();
      } else {
        setEntity((String)value);
      }
      break;

    case FINDEX:
      if (value == null) {
        unsetFindex();
      } else {
        setFindex((Integer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((ThriftFactValue)value);
      }
      break;

    case SECONDS:
      if (value == null) {
        unsetSeconds();
      } else {
        setSeconds((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTITY:
      return getEntity();

    case FINDEX:
      return Integer.valueOf(getFindex());

    case VALUE:
      return getValue();

    case SECONDS:
      return Integer.valueOf(getSeconds());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTITY:
      return isSetEntity();
    case FINDEX:
      return isSetFindex();
    case VALUE:
      return isSetValue();
    case SECONDS:
      return isSetSeconds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftFactV2)
      return this.equals((ThriftFactV2)that);
    return false;
  }

  public boolean equals(ThriftFactV2 that) {
    if (that == null)
      return false;

    boolean this_present_entity = true && this.isSetEntity();
    boolean that_present_entity = true && that.isSetEntity();
    if (this_present_entity || that_present_entity) {
      if (!(this_present_entity && that_present_entity))
        return false;
      if (!this.entity.equals(that.entity))
        return false;
    }

    boolean this_present_findex = true;
    boolean that_present_findex = true;
    if (this_present_findex || that_present_findex) {
      if (!(this_present_findex && that_present_findex))
        return false;
      if (this.findex != that.findex)
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_seconds = true && this.isSetSeconds();
    boolean that_present_seconds = true && that.isSetSeconds();
    if (this_present_seconds || that_present_seconds) {
      if (!(this_present_seconds && that_present_seconds))
        return false;
      if (this.seconds != that.seconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftFactV2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFindex()).compareTo(other.isSetFindex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFindex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findex, other.findex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeconds()).compareTo(other.isSetSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seconds, other.seconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftFactV2(");
    boolean first = true;

    sb.append("entity:");
    if (this.entity == null) {
      sb.append("null");
    } else {
      sb.append(this.entity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("findex:");
    sb.append(this.findex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (isSetSeconds()) {
      if (!first) sb.append(", ");
      sb.append("seconds:");
      sb.append(this.seconds);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftFactV2StandardSchemeFactory implements SchemeFactory {
    public ThriftFactV2StandardScheme getScheme() {
      return new ThriftFactV2StandardScheme();
    }
  }

  private static class ThriftFactV2StandardScheme extends StandardScheme<ThriftFactV2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftFactV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entity = iprot.readString();
              struct.setEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.findex = iprot.readI32();
              struct.setFindexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new ThriftFactValue();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seconds = iprot.readI32();
              struct.setSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftFactV2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entity != null) {
        oprot.writeFieldBegin(ENTITY_FIELD_DESC);
        oprot.writeString(struct.entity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINDEX_FIELD_DESC);
      oprot.writeI32(struct.findex);
      oprot.writeFieldEnd();
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        struct.value.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSeconds()) {
        oprot.writeFieldBegin(SECONDS_FIELD_DESC);
        oprot.writeI32(struct.seconds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftFactV2TupleSchemeFactory implements SchemeFactory {
    public ThriftFactV2TupleScheme getScheme() {
      return new ThriftFactV2TupleScheme();
    }
  }

  private static class ThriftFactV2TupleScheme extends TupleScheme<ThriftFactV2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftFactV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEntity()) {
        optionals.set(0);
      }
      if (struct.isSetFindex()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetSeconds()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEntity()) {
        oprot.writeString(struct.entity);
      }
      if (struct.isSetFindex()) {
        oprot.writeI32(struct.findex);
      }
      if (struct.isSetValue()) {
        struct.value.write(oprot);
      }
      if (struct.isSetSeconds()) {
        oprot.writeI32(struct.seconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftFactV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.entity = iprot.readString();
        struct.setEntityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.findex = iprot.readI32();
        struct.setFindexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = new ThriftFactValue();
        struct.value.read(iprot);
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.seconds = iprot.readI32();
        struct.setSecondsIsSet(true);
      }
    }
  }

}

