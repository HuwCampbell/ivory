/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * NOTE: The current encoding of structs is far from optimal/ideal, and is to avoid an early bump in Dictionary verions.
 * When we decide to make a new version of the dictionary, something like the following would be better.
 * 
 * struct IntEncoding {}
 * struct ...Encoding {}
 * struct StringEncoding {}
 * struct StructEncoding {
 *  1:  list<ThriftDictionaryStructMeta> values;
 * }
 * union ThriftDicitonaryEncoding {
 *  1: IntEncoding intEncoding;
 *  2: ...
 *  n: StructEncoding structEncoding;
 * }
 */
public class ThriftDictionaryStructMeta implements org.apache.thrift.TBase<ThriftDictionaryStructMeta, ThriftDictionaryStructMeta._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDictionaryStructMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDictionaryStructMeta");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftDictionaryStructMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftDictionaryStructMetaTupleSchemeFactory());
  }

  public String name; // required
  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryEncoding encoding; // required
  public ThriftDictionaryStructMetaOpts opts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see ThriftDictionaryEncoding
     */
    ENCODING((short)2, "encoding"),
    OPTS((short)3, "opts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ENCODING
          return ENCODING;
        case 3: // OPTS
          return OPTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftDictionaryEncoding.class)));
    tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDictionaryStructMetaOpts.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDictionaryStructMeta.class, metaDataMap);
  }

  public ThriftDictionaryStructMeta() {
  }

  public ThriftDictionaryStructMeta(
    String name,
    ThriftDictionaryEncoding encoding,
    ThriftDictionaryStructMetaOpts opts)
  {
    this();
    this.name = name;
    this.encoding = encoding;
    this.opts = opts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftDictionaryStructMeta(ThriftDictionaryStructMeta other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetOpts()) {
      this.opts = new ThriftDictionaryStructMetaOpts(other.opts);
    }
  }

  public ThriftDictionaryStructMeta deepCopy() {
    return new ThriftDictionaryStructMeta(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.encoding = null;
    this.opts = null;
  }

  public String getName() {
    return this.name;
  }

  public ThriftDictionaryStructMeta setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryEncoding getEncoding() {
    return this.encoding;
  }

  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryStructMeta setEncoding(ThriftDictionaryEncoding encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  public ThriftDictionaryStructMetaOpts getOpts() {
    return this.opts;
  }

  public ThriftDictionaryStructMeta setOpts(ThriftDictionaryStructMetaOpts opts) {
    this.opts = opts;
    return this;
  }

  public void unsetOpts() {
    this.opts = null;
  }

  /** Returns true if field opts is set (has been assigned a value) and false otherwise */
  public boolean isSetOpts() {
    return this.opts != null;
  }

  public void setOptsIsSet(boolean value) {
    if (!value) {
      this.opts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((ThriftDictionaryEncoding)value);
      }
      break;

    case OPTS:
      if (value == null) {
        unsetOpts();
      } else {
        setOpts((ThriftDictionaryStructMetaOpts)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ENCODING:
      return getEncoding();

    case OPTS:
      return getOpts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ENCODING:
      return isSetEncoding();
    case OPTS:
      return isSetOpts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftDictionaryStructMeta)
      return this.equals((ThriftDictionaryStructMeta)that);
    return false;
  }

  public boolean equals(ThriftDictionaryStructMeta that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_opts = true && this.isSetOpts();
    boolean that_present_opts = true && that.isSetOpts();
    if (this_present_opts || that_present_opts) {
      if (!(this_present_opts && that_present_opts))
        return false;
      if (!this.opts.equals(that.opts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftDictionaryStructMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpts()).compareTo(other.isSetOpts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftDictionaryStructMeta(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoding:");
    if (this.encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opts:");
    if (this.opts == null) {
      sb.append("null");
    } else {
      sb.append(this.opts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftDictionaryStructMetaStandardSchemeFactory implements SchemeFactory {
    public ThriftDictionaryStructMetaStandardScheme getScheme() {
      return new ThriftDictionaryStructMetaStandardScheme();
    }
  }

  private static class ThriftDictionaryStructMetaStandardScheme extends StandardScheme<ThriftDictionaryStructMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDictionaryStructMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoding = ThriftDictionaryEncoding.findByValue(iprot.readI32());
              struct.setEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.opts = new ThriftDictionaryStructMetaOpts();
              struct.opts.read(iprot);
              struct.setOptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDictionaryStructMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.encoding != null) {
        oprot.writeFieldBegin(ENCODING_FIELD_DESC);
        oprot.writeI32(struct.encoding.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.opts != null) {
        oprot.writeFieldBegin(OPTS_FIELD_DESC);
        struct.opts.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftDictionaryStructMetaTupleSchemeFactory implements SchemeFactory {
    public ThriftDictionaryStructMetaTupleScheme getScheme() {
      return new ThriftDictionaryStructMetaTupleScheme();
    }
  }

  private static class ThriftDictionaryStructMetaTupleScheme extends TupleScheme<ThriftDictionaryStructMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDictionaryStructMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetEncoding()) {
        optionals.set(1);
      }
      if (struct.isSetOpts()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEncoding()) {
        oprot.writeI32(struct.encoding.getValue());
      }
      if (struct.isSetOpts()) {
        struct.opts.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDictionaryStructMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.encoding = ThriftDictionaryEncoding.findByValue(iprot.readI32());
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.opts = new ThriftDictionaryStructMetaOpts();
        struct.opts.read(iprot);
        struct.setOptsIsSet(true);
      }
    }
  }

}

